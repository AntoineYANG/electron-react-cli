declare const origin = "/**\n * @type {import('eslint').Linter.BaseConfig & { rules: Record<string, 0 | \"off\" | 1 | \"warn\" | 2 | \"error\" | [0 | \"off\" | 1 | \"warn\" | 2 | \"error\", ...any[]]>; }}\n */\nconst eslintConfig = {\n  env: {\n    browser: true,\n    node: true,\n    es2021: true\n  },\n  extends: [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  parser: \"@typescript-eslint/parser\",\n  parserOptions: {\n    ecmaFeatures: {\n      jsx: true\n    },\n    ecmaVersion: 12,\n    sourceType: \"module\"\n  },\n  plugins: [\n    \"react\",\n    \"@typescript-eslint\"\n  ],\n  rules: {\n    'accessor-pairs': [\n      'error', {\n        setWithoutGet: true\n      }\n    ],\n    'array-bracket-newline': [\n      'error', {\n        \"multiline\": true,\n        \"minItems\": 4\n      }\n    ],\n    'array-bracket-spacing': [\n      'error',\n      'never', {\n        singleValue: false,\n        objectsInArrays: false,\n        arraysInArrays: false\n      }\n    ],\n    'array-callback-return': ['error'],\n    'array-element-newline': [\n      'error', {\n        \"multiline\": true,\n        \"minItems\": 4\n      }\n    ],\n    'arrow-body-style': ['error', 'as-needed'],\n    'arrow-parens': ['error', 'as-needed'],\n    'arrow-spacing': [\n      'error', {\n        \"before\": true,\n        \"after\": true\n      }\n    ],\n    'block-scoped-var': 'error',\n    'block-spacing': ['error'],\n    'brace-style': ['error'],\n    'callback-return': [\n      'error', [\n        'callback',\n        'cb',\n        'next',\n        'resolve',\n        'reject'\n      ]\n    ],\n    camelcase: [\n      'error', {\n        properties: \"always\"\n      }\n    ],\n    'capitalized-comments': [\n      'error',\n      'always', {\n        line: {\n          ignorePattern: '.'\n        },\n        block: {\n          ignorePattern: 'no',\n          ignoreInlineComments: true,\n          ignoreConsecutiveComments: true\n        }\n      }\n    ],\n    'class-methods-use-this': [\n      'error', {\n        exceptMethods: [\n          'constructor',\n          'componentDidMount',\n          'componentDidUpdate',\n          'render',\n          'componentDidCatch',\n          'componentWillUnmount'\n        ]\n      }\n    ],\n    'comma-dangle': ['error', 'only-multiline'],\n    'comma-spacing': [\n      'error', {\n        \"before\": false,\n        \"after\": true\n      }\n    ],\n    'comma-style': ['error', 'last'],\n    complexity: ['error', 20],\n    'computed-property-spacing': 'off',\n    'consistent-return': 'error',\n    'consistent-this': ['error', 'that'],\n    'constructor-super': 'error',\n    curly: ['error', 'all'],\n    'default-case': [\n      'error', {\n        commentPattern: '/^[nN]o default( case)?$/'\n      }\n    ],\n    'dot-notation': 'error',\n    'eol-last': 'error',\n    eqeqeq: 'error',\n    'for-direction': 'error',\n    'func-call-spacing': ['error', 'never'],\n    'func-name-matching': 'off',\n    'func-names': 'off',\n    'func-style': [\n      'error',\n      'declaration', {\n        allowArrowFunctions: true\n      }\n    ],\n    'function-paren-newline': ['error', 'consistent'],\n    'generator-star-spacing': [\n      'error', {\n        before: true,\n        after: false\n      }\n    ],\n    'getter-return': 'error',\n    'global-require': 'off',\n    'guard-for-in': 'error',\n    'handle-callback-err': [\n      'error',\n      '^(err|error|reason)$'\n    ],\n    'id-length': [\n      'error', {\n        min: 1,\n        max: 24\n      } \n    ],\n    'id-match': 'off',\n    'implicit-arrow-linebreak': ['error', 'beside'],\n    indent: [\n      'error',\n      2, {\n        SwitchCase: 1,\n        VariableDeclarator: {\n          \"var\": 2,\n          \"let\": 2,\n          \"const\": 3\n        },\n        MemberExpression: 1,\n        FunctionDeclaration: {\n          body: 1,\n          parameters: 'first'\n        },\n        CallExpression: {\n          arguments: 'first'\n        },\n        ArrayExpression: 'first',\n        ObjectExpression: 'first',\n        ImportDeclaration: 'first',\n        flatTernaryExpressions: true\n      }\n    ],\n    'init-declarations': ['error', 'always'],\n    'jsx-quotes': ['error', 'prefer-double'],\n    'key-spacing': [\n      'error', {\n        multiLine: {\n          beforeColon: false,\n          afterColon: true,\n          mode: 'minimum',\n          align: 'value'\n        }\n      }\n    ],\n    'keyword-spacing': [\n      'error', {\n        before: true,\n        after: true\n      }\n    ],\n    'lines-between-class-members': [\n      'error',\n      'always', {\n        exceptAfterSingleLine: true\n      }\n    ],\n    'max-depth': ['error', 4],\n    'max-len': [\n      'error', {\n        code: 120,\n        tabWidth: 2,\n        ignoreUrls: true,\n        ignoreTrailingComments: true,\n        ignoreStrings: true,\n        ignoreTemplateLiterals: false,\n        ignoreRegExpLiterals: true\n      }\n    ],\n    'max-lines': [\n      'error', {\n        max: 300,\n        skipBlankLines: true,\n        skipComments: true\n      }\n    ],\n    'max-nested-callbacks': ['error', 3],\n    'max-params': ['warn', 5],\n    'max-statements': ['error', 40],\n    'max-statements-per-line': [\n      'error', {\n        max: 2\n      }\n    ],\n    'multiline-ternary': 'off',\n    'new-cap': 'error',\n    'new-parens': 'error',\n    'no-alert': 'warn',\n    'no-await-in-loop': 'error',\n    'no-case-declarations': 'error',\n    'no-class-assign': 'error',\n    'no-compare-neg-zero': 'error',\n    'no-cond-assign': 'error',\n    'no-confusing-arrow': [\n      'error', {\n        allowParens: true\n      }\n    ],\n    'no-console': 'warn',\n    'no-constant-condition': 'error',\n    'no-control-regex': 'error',\n    'no-debugger': 'error',\n    'no-delete-var': 'error',\n    'no-duplicate-case': 'error',\n    'no-duplicate-imports': 'error',\n    'no-else-return': 'warn',\n    'no-empty': 'error',\n    'no-empty-function': 'error',\n    'no-empty-pattern': 'warn',\n    'no-eval': 'error',\n    'no-ex-assign': 'error',\n    'no-extend-native': 'error',\n    'no-extra-bind': 'error',\n    'no-extra-boolean-cast': 'error',\n    'no-extra-label': 'error',\n    'no-extra-semi': 'error',\n    'no-fallthrough': [\n      'error', {\n        commentPattern: '/(falls? through)|(break omitted)/i'\n      }\n    ],\n    'no-floating-decimal': 'error',\n    'no-implicit-coercion': 'error',\n    'no-implied-eval': 'error',\n    'no-invalid-regexp': 'error',\n    'no-invalid-this': 'error',\n    'no-labels': 'error',\n    'no-lone-blocks': 'error',\n    'no-lonely-if': 'warn',\n    'no-magic-numbers': [\n      'error', {\n        ignore: [\n          -1,\n          0,\n          1,\n          2,\n          3,\n          4,\n          10,\n          100,\n          1000\n        ],\n        ignoreArrayIndexes: true,\n        detectObjects: true\n      }\n    ],\n    'no-mixed-operators': [\n      'error', {\n        groups: [\n          [\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"],\n          [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n          [\"in\", \"instanceof\"]\n        ],\n        allowSamePrecedence: true\n      }\n    ],\n    'no-mixed-spaces-and-tabs': 'error',\n    'no-multi-assign': 'error',\n    'no-multi-spaces': 'error',\n    'no-multi-str': 'error',\n    'no-multiple-empty-lines': 'error',\n    'no-new': 'error',\n    'no-new-func': 'error',\n    'no-new-object': 'error',\n    'no-new-require': 'error',\n    'no-new-wrappers': 'error',\n    'no-obj-calls': 'error',\n    'no-octal': 'error',\n    'no-octal-escape': 'error',\n    'no-param-reassign': 'error',\n    'no-plusplus': 'error',\n    'no-redeclare': 'error',\n    'no-regex-spaces': 'error',\n    'no-return-assign': 'error',\n    'no-return-await': 'error',\n    'no-self-assign': 'error',\n    'no-self-compare': 'error',\n    'no-sequences': 'error',\n    'no-shadow-restricted-names': 'error',\n    'no-sparse-arrays': 'error',\n    'no-this-before-super': 'error',\n    'no-throw-literal': 'error',\n    'no-undef': 'error',\n    'no-unexpected-multiline': 'error',\n    'no-unmodified-loop-condition': 'error',\n    'no-unneeded-ternary': 'error',\n    'no-unreachable': 'warn',\n    'no-unsafe-finally': 'error',\n    'no-unsafe-negation': 'error',\n    'no-unused-expressions': 'error',\n    'no-unused-vars': 'off',\n    '@typescript-eslint/no-unused-vars': 'off',\n    'no-use-before-define': 'off',\n    'no-useless-call': 'error',\n    'no-useless-computed-key': 'error',\n    'no-useless-concat': 'error',\n    'no-useless-constructor': 'error',\n    'no-useless-escape': 'error',\n    'no-useless-rename': 'error',\n    'no-var': 'error',\n    'no-warning-comments': [\n      'warn', {\n        terms: [\n          'todo', 'fixme'\n        ],\n        location: 'start'\n      }\n    ],\n    'object-curly-newline': [\n      'error', {\n        consistent: true\n      }\n    ],\n    'object-curly-spacing': [\n      'error',\n      'always', {\n        objectsInObjects: false\n      }\n    ],\n    'object-shorthand': [\n      'error',\n      'always', {\n        avoidQuotes: true,\n        ignoreConstructors: true\n      }\n    ],\n    'one-var': ['error', 'never'],\n    'one-var-declaration-per-line': 'error',\n    'operator-assignment': 'warn',\n    'operator-linebreak': ['error', 'before'],\n    'padding-line-between-statements': [\n      'warn', {\n        blankLine: 'always',\n        prev: '*',\n        next: 'block-like'\n      }, {\n        blankLine: 'never',\n        prev: ['break', 'continue'],\n        next: '*'        \n      }, {\n        blankLine: 'always',\n        prev: '*',\n        next: 'class'\n      }, {\n        blankLine: 'always',\n        prev: 'class',\n        next: '*'\n      }, {\n        blankLine: 'always',\n        prev: '*',\n        next: ['if', 'while', 'do', 'try']\n      }, {\n        blankLine: 'any',\n        prev: ['if', 'while', 'do', 'try', 'empty'],\n        next: ['if', 'while', 'do', 'try']\n      }\n    ],\n    'prefer-arrow-callback': 'warn',\n    'prefer-const': 'warn',\n    'prefer-destructuring': 'warn',\n    'prefer-promise-reject-errors': 'error',\n    'prefer-reflect': 'warn',\n    'prefer-rest-params': 'error',\n    'prefer-spread': 'warn',\n    'prefer-template': 'error',\n    'quote-props': ['error', 'as-needed'],\n    quotes: [\n      'error',\n      'single', {\n        avoidEscape: true\n      }\n    ],\n    radix: 'error',\n    'require-await': 'error',\n    'require-jsdoc': [\n      'error', {\n        require: {\n          FunctionDeclaration: true,\n          MethodDefinition: false,\n          ClassDeclaration: true,\n          ArrowFunctionExpression: false,\n          FunctionExpression: false\n        }\n      }\n    ],\n    'require-yield': 'error',\n    'rest-spread-spacing': ['error', 'never'],\n    'semi': ['error', 'always'],\n    'semi-spacing': 'error',\n    'semi-style': ['error', 'last'],\n    'sort-imports': 'off',\n    'space-before-blocks': ['error', 'always'],\n    'space-before-function-paren': [\n      'error', {\n        anonymous: 'always',\n        named: 'never',\n        asyncArrow: 'always'\n      }\n    ],\n    'space-in-parens': ['error', 'never'],\n    'space-infix-ops': [\n      'error', {\n        int32Hint: false\n      }\n    ],\n    'space-unary-ops': [\n      'error', {\n        words: true,\n        nonwords: true,\n        overrides: {\n          '!': false,\n          '-': false\n        }\n      }\n    ],\n    'spaced-comment': ['error', 'always'],\n    'switch-colon-spacing': 'error',\n    'template-curly-spacing': 'error',\n    'template-tag-spacing': 'error',\n    'use-isnan': 'error',\n    'valid-typeof': 'error',\n    'wrap-iife': 'error'\n  }\n}\n\nmodule.exports = eslintConfig;\n";
export default origin;
