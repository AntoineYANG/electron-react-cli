/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-var-requires */
'use strict';

const chalk = require('react-dev-utils/chalk');
const paths = require('../configs/paths.json');
const pkgJson = require('../package.json');
const path = require('path');
const fs = require('fs');

// initialize
const init = require('./utils/init');
init('dev');

// dev server configs
// eslint-disable-next-line no-magic-numbers
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require('react-dev-utils/browsersHelper');
const {
  choosePort,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');

const isInteractive = process.stdout.isTTY;
const { rootDir: appPath } = paths;

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const startReactDev = listener => new Promise((resolve, reject) => {
  try {
    checkBrowsers(
      appPath, isInteractive
    ).then(
      () => choosePort(HOST, DEFAULT_PORT)
    ).then(
      port => {
        if (port === null) {
          console.log(
            chalk.red(
              'Cannot find a port, dev server exits.'
            )
          );
          return;
        }
    
        console.log(
          chalk.cyan(
            `Activate dev server on: ${chalk.yellow(
              chalk.bold(`${HOST}:${port}`)
            )}`
          )
        );
        
        const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
        const { name: appName, proxy } = pkgJson;
    
        const urls = prepareUrls(
          protocol,
          HOST,
          port,
          path.resolve(fs.realpathSync(process.cwd()), paths.rootDir, paths.publicPath).slice(0, -1)
        );
    
        const webpack = require('webpack');
    
        const resolveApp = relativePath => path.resolve(fs.realpathSync(process.cwd()), paths.rootDir, relativePath);
        
        // Load proxy config
        const proxyConfig = prepareProxy(
          proxy,
          resolveApp('/'),
          resolveApp(paths.publicPath)
        );
        const createDevServerConfig = require('./utils/webpackDevServer.config');
        // Serve webpack assets generated by the compiler over a web server.
        const serverConfig = createDevServerConfig(
          proxyConfig,
          urls.lanUrlForConfig
        );

        let devServer = null;

        const devSocket = {
          warnings: warnings => devServer.sockWrite(devServer.sockets, 'warnings', warnings),
          errors:   errors => devServer.sockWrite(devServer.sockets, 'errors', errors),
        };

        const configFactory = require('./utils/webpackConfigFactory');
        const config = configFactory('development');

        const WebpackDevServer = require('webpack-dev-server');
        const { createCompiler } = require('react-dev-utils/WebpackDevServerUtils');

        // Create a webpack compiler that is configured with custom messages.
        const compiler = createCompiler({
          appName,
          config,
          devSocket,
          urls,
          useYarn:           false,
          useTypeScript:     true,
          tscCompileOnError: process.env.TSC_COMPILE_ON_ERROR === 'true',
          webpack,
        });

        devServer = new WebpackDevServer(compiler, serverConfig);
        
        const clearConsole = require('react-dev-utils/clearConsole');
        const url = `http://localhost:${port}/`;
          
        // Launch WebpackDevServer.
        devServer.listen(port, HOST, err => {
          if (err) {
            console.log(err);
            return;
          }
          if (isInteractive) {
            clearConsole();
          }
          
          console.log(chalk.cyan('Starting the development server...\n'));
          listener?.({ url });
        });
          
        ['SIGINT', 'SIGTERM'].forEach(sig => {
          process.on(sig, () => {
            devServer.close();
            process.exit();
          });
        });
          
        if (process.env.CI !== 'true') {
          // Gracefully exit when stdin ends
          process.stdin.on('end', () => {
            devServer.close();
            process.exit();
          });
        }

        resolve({ url });
      }
    ).catch(
      err => {
        if (err && err.message) {
          console.log(err.message);
        }
        process.exit(1);
      }
    );
    return 0;
  } catch (err) {
    return reject(err);
  }
});

module.exports = {
  startReactDev
};
