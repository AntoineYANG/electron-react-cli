"use strict";
/*
 * @Author: Kanata You
 * @Date: 2022-01-23 20:26:10
 * @Last Modified by: Kanata You
 * @Last Modified time: 2022-01-26 16:55:15
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

const fs = require("fs");

const path = require("path");

const mkdirp_1 = require("mkdirp");

const _env_1 = require("../../../../utils/env");

const load_template_1 = require("../../utils/load-template");

const createPackage = async config => {
  const dir = _env_1.default.resolvePathInPackage(config.name);

  (0, mkdirp_1.sync)(dir);
  fs.writeFileSync(path.join(dir, 'README.md'), `# ${config.name}\n\n`, {
    encoding: 'utf-8'
  });
  const gitUrl = _env_1.default.rootPkg?.repository?.url;
  fs.writeFileSync(path.join(dir, 'package.json'), JSON.stringify({
    name: config.name,
    version: config.version,
    description: 'Generated by espoir',
    espoirVersion: _env_1.default.version,
    repository: gitUrl ? {
      type: 'git',
      url: gitUrl,
      directory: `packages/${config.name}`
    } : undefined,
    contributors: config.contributors,
    bugs: gitUrl ? {
      url: gitUrl.replace(/\.git$/, '/issues')
    } : undefined,
    homepage: gitUrl ? gitUrl.replace(/\.git$/, `/blob/main/packages/${config.name}/README.md`) : undefined,
    scripts: {},
    dependencies: {},
    devDependencies: config.enableTS ? {
      typescript: '*'
    } : {},
    peerDependencies: {
      'espoir-cli': `^${_env_1.default.runtime.espoir.version}`
    }
  }, undefined, 2) + '\n', {
    encoding: 'utf-8'
  });

  if (config.template !== 'none' && (await (0, load_template_1.default)(config.name, config.enableTS, config.template))) {
    // created successfully with template
    return JSON.parse(fs.readFileSync(path.join(dir, 'package.json'), {
      encoding: 'utf-8'
    }));
  } // else: no template


  (0, mkdirp_1.sync)(path.join(dir, 'configs'));
  (0, mkdirp_1.sync)(path.join(dir, 'scripts'));
  (0, mkdirp_1.sync)(path.join(dir, 'tasks'));
  (0, mkdirp_1.sync)(path.join(dir, 'src'));

  if (config.enableTS) {
    (0, mkdirp_1.sync)(path.join(dir, 'typings'));
    fs.writeFileSync(path.join(dir, 'tsconfig.json'), JSON.stringify({
      extends: '../../tsconfig.base.json',
      include: ['./src/**/*'],
      exclude: ['node_modules', '.modules'],
      compilerOptions: {
        baseUrl: 'src',
        module: 'CommonJS',
        moduleResolution: 'Node',
        paths: {
          '@src/*': ['*']
        },
        declaration: false,
        preserveConstEnums: true,
        removeComments: false,
        sourceMap: false,
        allowJs: false,
        resolveJsonModule: true,
        target: 'ESNext',
        isolatedModules: true,
        allowUnusedLabels: false,
        alwaysStrict: true,
        exactOptionalPropertyTypes: true,
        noFallthroughCasesInSwitch: true,
        noImplicitAny: true,
        noImplicitOverride: true,
        noImplicitReturns: true,
        noImplicitThis: true,
        noPropertyAccessFromIndexSignature: true,
        noUncheckedIndexedAccess: true,
        strict: true,
        strictBindCallApply: true,
        strictFunctionTypes: true,
        strictNullChecks: true,
        strictPropertyInitialization: true,
        useUnknownInCatchVariables: false,
        rootDirs: ['src/', '../../node_modules/'],
        typeRoots: ['../../node_modules/@types/']
      }
    }, undefined, 2) + '\n', {
      encoding: 'utf-8'
    });
  }

  return JSON.parse(fs.readFileSync(path.join(dir, 'package.json'), {
    encoding: 'utf-8'
  }));
};

exports.default = createPackage;