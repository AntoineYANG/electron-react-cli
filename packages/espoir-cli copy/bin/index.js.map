{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///../src/index.ts","webpack:///external node-commonjs \"child_process\"","webpack:///external node-commonjs \"events\"","webpack:///external node-commonjs \"fs\"","webpack:///external node-commonjs \"path\"","webpack:///../../../node_modules/commander/index.js","webpack:///../../../node_modules/commander/lib/argument.js","webpack:///../../../node_modules/commander/lib/command.js","webpack:///../../../node_modules/commander/lib/error.js","webpack:///../../../node_modules/commander/lib/help.js","webpack:///../../../node_modules/commander/lib/option.js","webpack:///../../../node_modules/commander/lib/suggestSimilar.js","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["/*\r\n * @Author: Kanata You \r\n * @Date: 2021-11-10 21:31:32 \r\n * @Last Modified by: Kanata You\r\n * @Last Modified time: 2021-11-10 23:16:52\r\n */\r\n\r\nconsole.log('hello world');\r\n\r\nprocess.on('unhandledRejection', err => {\r\n  throw err;\r\n});\r\n\r\nimport { exit } from 'process';\r\n// import { resolve } from 'path';\r\nimport { program } from 'commander';\r\n// import createProject from './create-project.js';\r\nprogram.version(\"0.0.0-alpha-1.3.0\");\r\nprogram\r\n    .command('project [dir]')\r\n    .description('create a new project')\r\n    // .option('')\r\n    .aliases(['p'])\r\n    .action((dir, cmd) => {\r\n    // console.log({ dir, cmd });\r\n    // createProject(dir).finally(() => exit(0));\r\n});\r\nprogram.parse(process.argv);\r\n","module.exports = require(\"child_process\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\n// @ts-check\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\nexports.program = exports; // More explicit access to global command.\n// Implicit export of createArgument, createCommand, and createOption.\n\n/**\n * Expose classes\n */\n\nexports.Argument = Argument;\nexports.Command = Command;\nexports.CommanderError = CommanderError;\nexports.Help = Help;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\nexports.Option = Option;\n","const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  };\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  };\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  };\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  };\n\n  /**\n   * Make option-argument required.\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make option-argument optional.\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n","const EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, splitOptionFlags } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\n// @ts-check\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this._args = [];\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default < config < env < cli\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {boolean | string} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = false;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} returns `this` for executable command\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._hasHelpOption = sourceCommand._hasHelpOption;\n    this._helpFlags = sourceCommand._helpFlags;\n    this._helpDescription = sourceCommand._helpDescription;\n    this._helpShortFlag = sourceCommand._helpShortFlag;\n    this._helpLongFlag = sourceCommand._helpLongFlag;\n    this._helpCommandName = sourceCommand._helpCommandName;\n    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n    this._helpCommandDescription = sourceCommand._helpCommandDescription;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this.commands.push(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  };\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  };\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  };\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {boolean|string} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) throw new Error('Command passed to .addCommand() must have a name');\n\n    // To keep things simple, block automatic name generation for deeply nested executables.\n    // Fail fast and detect when adding rather than later when parsing.\n    function checkExplicitNames(commandArray) {\n      commandArray.forEach((cmd) => {\n        if (cmd._executableHandler && !cmd._executableFile) {\n          throw new Error(`Must specify executableFile for deeply nested executable: ${cmd.name()}`);\n        }\n        checkExplicitNames(cmd.commands);\n      });\n    }\n    checkExplicitNames(cmd.commands);\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  };\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  };\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names.split(/ +/).forEach((detail) => {\n      this.argument(detail);\n    });\n    return this;\n  };\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this._args.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n    }\n    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n    }\n    this._args.push(argument);\n    return this;\n  }\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  };\n\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  };\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  };\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  };\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this._args.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  };\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  };\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n\n    let defaultValue = option.defaultValue;\n\n    // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value\n    if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {\n      // when --no-foo we make sure default is true, unless a --foo option is already defined\n      if (option.negate) {\n        const positiveLongFlag = option.long.replace(/^--no-/, '--');\n        defaultValue = this._findOption(positiveLongFlag) ? this.getOptionValue(name) : true;\n      }\n      // preassign only if we have a default\n      if (defaultValue !== undefined) {\n        this.setOptionValueWithSource(name, defaultValue, 'default');\n      }\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // Note: using closure to access lots of lexical scoped variables.\n      const oldValue = this.getOptionValue(name);\n\n      // custom processing\n      if (val !== null && option.parseArg) {\n        try {\n          val = option.parseArg(val, oldValue === undefined ? defaultValue : oldValue);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `${invalidValueMessage} ${err.message}`;\n            this._displayError(err.exitCode, err.code, message);\n          }\n          throw err;\n        }\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // unassigned or boolean value\n      if (typeof oldValue === 'boolean' || typeof oldValue === 'undefined') {\n        // if no value, negate false, and we have a default, then use it!\n        if (val == null) {\n          this.setOptionValueWithSource(name, option.negate ? false : defaultValue || true, valueSource);\n        } else {\n          this.setOptionValueWithSource(name, val, valueSource);\n        }\n      } else if (val !== null) {\n        // reassign\n        this.setOptionValueWithSource(name, option.negate ? false : val, valueSource);\n      }\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description` and optional\n   * coercion `fn`.\n   *\n   * The `flags` string contains the short and/or long flags,\n   * separated by comma, a pipe or space. The following are all valid\n   * all will output this way when `--help` is used.\n   *\n   *     \"-p, --pepper\"\n   *     \"-p|--pepper\"\n   *     \"-p --pepper\"\n   *\n   * @example\n   * // simple boolean defaulting to undefined\n   * program.option('-p, --pepper', 'add pepper');\n   *\n   * program.pepper\n   * // => undefined\n   *\n   * --pepper\n   * program.pepper\n   * // => true\n   *\n   * // simple boolean defaulting to true (unless non-negated option is also defined)\n   * program.option('-C, --no-cheese', 'remove cheese');\n   *\n   * program.cheese\n   * // => true\n   *\n   * --no-cheese\n   * program.cheese\n   * // => false\n   *\n   * // required argument\n   * program.option('-C, --chdir <path>', 'change the working directory');\n   *\n   * --chdir /tmp\n   * program.chdir\n   * // => \"/tmp\"\n   *\n   * // optional argument\n   * program.option('-c, --cheese [type]', 'add cheese [marble]');\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, fn, defaultValue) {\n    return this._optionEx({}, flags, description, fn, defaultValue);\n  };\n\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [fn] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, fn, defaultValue) {\n    return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);\n  };\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  };\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  };\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  };\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  };\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n    }\n    return this;\n  };\n\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    return this;\n  };\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {Object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  };\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    return this;\n  };\n\n  /**\n   * Store option value and where the value came from.\n    *\n    * @param {string} key\n    * @param {Object} value\n    * @param {string} source - expected values are default/config/env/cli\n    * @return {Command} `this` command for chaining\n    */\n\n  setOptionValueWithSource(key, value, source) {\n    this.setOptionValue(key, value);\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n    * Get source of option value.\n    * Expected values are default | config | env | cli\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  };\n\n  /**\n   * Get user arguments implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included application, and use that to set implicit command name.\n   *\n   * @api private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n    if (!this._scriptPath && require.main) {\n      this._scriptPath = require.main.filename;\n    }\n\n    // Guess name, used in usage in help.\n    this._name = this._name || (this._scriptPath && path.basename(this._scriptPath, path.extname(this._scriptPath)));\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * program.parse(process.argv);\n   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  };\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * await program.parseAsync(process.argv);\n   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  };\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n\n    // Want the entry script as the reference for command name and directory for searching for other files.\n    let scriptPath = this._scriptPath;\n    // Fallback in case not set, due to how Command created or called.\n    if (!scriptPath && require.main) {\n      scriptPath = require.main.filename;\n    }\n\n    let baseDir;\n    try {\n      const resolvedLink = fs.realpathSync(scriptPath);\n      baseDir = path.dirname(resolvedLink);\n    } catch (e) {\n      baseDir = '.'; // dummy, probably not going to find executable!\n    }\n\n    // name of the subcommand, like `pm-install`\n    let bin = path.basename(scriptPath, path.extname(scriptPath)) + '-' + subcommand._name;\n    if (subcommand._executableFile) {\n      bin = subcommand._executableFile;\n    }\n\n    const localBin = path.join(baseDir, bin);\n    if (fs.existsSync(localBin)) {\n      // prefer local `./<bin>` to bin in the $PATH\n      bin = localBin;\n    } else {\n      // Look for source files.\n      sourceExt.forEach((ext) => {\n        if (fs.existsSync(`${localBin}${ext}`)) {\n          bin = `${localBin}${ext}`;\n        }\n      });\n    }\n    launchWithNode = sourceExt.includes(path.extname(bin));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(bin);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(bin, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n    signals.forEach((signal) => {\n      // @ts-ignore\n      process.on(signal, () => {\n        if (proc.killed === false && proc.exitCode === null) {\n          proc.kill(signal);\n        }\n      });\n    });\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', (err) => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableMissing = `'${bin}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name`;\n        throw new Error(executableMissing);\n      // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${bin}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  };\n\n  /**\n   * @api private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    if (subCommand._executableHandler) {\n      this._executeSubCommand(subCommand, operands.concat(unknown));\n    } else {\n      return subCommand._parseCommand(operands, unknown);\n    }\n  };\n\n  /**\n   * Check this.args against expected this._args.\n   *\n   * @api private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this._args.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {\n      return;\n    }\n    if (this.args.length > this._args.length) {\n      this._excessArguments(this.args);\n    }\n  };\n\n  /**\n   * Process this.args using this._args and save as this.processedArgs!\n   *\n   * @api private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        try {\n          parsedValue = argument.parseArg(value, previous);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;\n            this._displayError(err.exitCode, err.code, message);\n          }\n          throw err;\n        }\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this._args.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {Promise|undefined} promise\n   * @param {Function} fn\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    getCommandAndParents(this)\n      .reverse()\n      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach(hookedCommand => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      if (operands.length === 1) {\n        this.help();\n      }\n      return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\n    }\n    if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    }\n    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    outputHelpIfRequested(this, parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let actionResult;\n      actionResult = this._chainOrCallHooks(actionResult, 'preAction');\n      actionResult = this._chainOrCall(actionResult, () => this._actionHandler(this.processedArgs));\n      if (this.parent) this.parent.emit(commandEvent, operands, unknown); // legacy\n      actionResult = this._chainOrCallHooks(actionResult, 'postAction');\n      return actionResult;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) { // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  };\n\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  };\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  };\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Lazy calling after checking for help flags from leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd.options.forEach((anOption) => {\n        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    }\n  };\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else { // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  };\n\n  /**\n   * Return an object containing options as key-value pairs\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  };\n\n  /**\n   * Internal bottleneck for handling of parsing errors.\n   *\n   * @api private\n   */\n  _displayError(exitCode, code, message) {\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @api private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {\n          if (option.required || option.optional) { // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else { // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this._displayError(1, 'commander.missingArgument', message);\n  };\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this._displayError(1, 'commander.optionMissingArgument', message);\n  };\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this._displayError(1, 'commander.missingMandatoryOptionValue', message);\n  };\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      let command = this;\n      do {\n        const moreFlags = command.createHelp().visibleOptions(command)\n          .filter(option => option.long)\n          .map(option => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this._displayError(1, 'commander.unknownOption', message);\n  };\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this._args.length;\n    const s = (expected === 1) ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this._displayError(1, 'commander.excessArguments', message);\n  };\n\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp().visibleCommands(this).forEach((command) => {\n        candidateNames.push(command.name());\n        // just visible alias\n        if (command.alias()) candidateNames.push(command.alias());\n      });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this._displayError(1, 'commander.unknownCommand', message);\n  };\n\n  /**\n   * Set the program version to `str`.\n   *\n   * This method auto-registers the \"-V, --version\" flag\n   * which will print the version number when passed.\n   *\n   * You can optionally supply the  flags and description to override the defaults.\n   *\n   * @param {string} str\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  };\n\n  /**\n   * Set the description to `str`.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  };\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n    command._aliases.push(alias);\n    return this;\n  };\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  };\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this._args.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\n        (this.commands.length ? '[command]' : []),\n        (this._args.length ? args : [])\n      ).join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  };\n\n  /**\n   * Get or set the name of the command\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  };\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  };\n\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    getCommandAndParents(this).reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    this.emit(this._helpLongFlag); // deprecated\n    this.emit('afterHelp', context);\n    getCommandAndParents(this).forEach(command => command.emit('afterAllHelp', context));\n  };\n\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n\n    const helpFlags = splitOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n\n    return this;\n  };\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  };\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n};\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\n/**\n * @param {Command} startCommand\n * @returns {Command[]}\n * @api private\n */\n\nfunction getCommandAndParents(startCommand) {\n  const result = [];\n  for (let command = startCommand; command; command = command.parent) {\n    result.push(command);\n  }\n  return result;\n}\n\nexports.Command = Command;\n","// @ts-check\n\n/**\n * CommanderError class\n * @class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n * @class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   * @constructor\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n","const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// @ts-check\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);\n    if (cmd._hasImplicitHelpCommand()) {\n      // Create a command matching the implicit help command.\n      const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);\n      const helpCommand = cmd.createCommand(helpName)\n        .helpOption(false);\n      helpCommand.description(cmd._helpCommandDescription);\n      if (helpArgs) helpCommand.arguments(helpArgs);\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Implicit help\n    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\n    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\n    if (showShortHelpFlag || showLongHelpFlag) {\n      let helpOption;\n      if (!showShortHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\n      } else if (!showLongHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\n      } else {\n        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\n      }\n      visibleOptions.push(helpOption);\n    }\n    if (this.sortOptions) {\n      const getSortKey = (option) => {\n        // WYSIWYG for order displayed in help with short before long, no special handling for negated.\n        return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');\n      };\n      visibleOptions.sort((a, b) => {\n        return getSortKey(a).localeCompare(getSortKey(b));\n      });\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd._args.forEach(argument => {\n        argument.description = argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd._args.find(argument => argument.description)) {\n      return cmd._args;\n    };\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd._args.map(arg => humanReadableArgName(arg)).join(' ');\n    return cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '');\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  };\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  };\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  };\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let parentCmdNames = '';\n    for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n      parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\n    }\n    return parentCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the command description to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n    // Some of these do not make sense for negated boolean and suppress for backwards compatibility.\n\n    if (option.argChoices && !option.negate) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (option.defaultValue !== undefined && !option.negate) {\n      extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  };\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n      }\n      return term;\n    };\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([commandDescription, '']);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper)\n    );\n  };\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Detect manually wrapped and indented strings by searching for line breaks\n    // followed by multiple spaces/tabs.\n    if (str.match(/[\\n]\\s+/)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.substr(0, indent);\n    const columnText = str.substr(indent);\n\n    const indentString = ' '.repeat(indent);\n    const regex = new RegExp('.{1,' + (columnWidth - 1) + '}([\\\\s\\u200B]|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]|$)', 'g');\n    const lines = columnText.match(regex) || [];\n    return leadingStr + lines.map((line, i) => {\n      if (line.slice(-1) === '\\n') {\n        line = line.slice(0, line.length - 1);\n      }\n      return ((i > 0) ? indentString : '') + line.trimRight();\n    }).join('\\n');\n  }\n}\n\nexports.Help = Help;\n","const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  };\n\n  /**\n   * Set environment variable to check for option value.\n   * Priority order of option values is default < env < cli\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  };\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  };\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  };\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  };\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values;\n    this.parseArg = (arg, previous) => {\n      if (!values.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${values.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  };\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  };\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  };\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  };\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\n","const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance) return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map(candidate => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map(candidate => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nvar __webpack_exports__ = __webpack_require__(__webpack_require__.s = 449);\n"],"names":["console","log","process","on","err","program","version","command","description","aliases","action","dir","cmd","parse","argv","module","exports","require","Argument","Command","CommanderError","InvalidArgumentError","Help","Option","InvalidOptionArgumentError","constructor","name","this","variadic","parseArg","undefined","defaultValue","defaultValueDescription","argChoices","required","_name","slice","length","_concatValue","value","previous","Array","isArray","concat","default","argParser","fn","choices","values","arg","includes","join","argRequired","argOptional","humanReadableArgName","nameOutput","EventEmitter","childProcess","path","fs","splitOptionFlags","suggestSimilar","super","commands","options","parent","_allowUnknownOption","_allowExcessArguments","_args","args","rawArgs","processedArgs","_scriptPath","_optionValues","_optionValueSources","_storeOptionsAsProperties","_actionHandler","_executableHandler","_executableFile","_defaultCommandName","_exitCallback","_aliases","_combineFlagAndOptionalValue","_description","_argsDescription","_enablePositionalOptions","_passThroughOptions","_lifeCycleHooks","_showHelpAfterError","_showSuggestionAfterError","_outputConfiguration","writeOut","str","stdout","write","writeErr","stderr","getOutHelpWidth","isTTY","columns","getErrHelpWidth","outputError","_hidden","_hasHelpOption","_helpFlags","_helpDescription","_helpShortFlag","_helpLongFlag","_addImplicitHelpCommand","_helpCommandName","_helpCommandnameAndArgs","_helpCommandDescription","_helpConfiguration","copyInheritedSettings","sourceCommand","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","match","createCommand","isDefault","noHelp","hidden","executableFile","arguments","push","createHelp","Object","assign","configureHelp","configuration","configureOutput","showHelpAfterError","displayHelp","showSuggestionAfterError","displaySuggestion","addCommand","Error","checkExplicitNames","commandArray","forEach","createArgument","argument","addArgument","names","split","detail","previousArgument","addHelpCommand","enableOrNameAndArgs","_hasImplicitHelpCommand","_findCommand","hook","event","listener","allowedValues","exitOverride","code","_exit","exitCode","message","exit","expectedArgsCount","actionArgs","apply","createOption","flags","addOption","option","oname","attributeName","negate","optional","positiveLongFlag","long","replace","_findOption","getOptionValue","setOptionValueWithSource","handleOptionValue","val","invalidValueMessage","valueSource","oldValue","_displayError","envVar","_optionEx","config","makeOptionMandatory","mandatory","RegExp","regex","def","m","exec","requiredOption","combineFlagAndOptionalValue","combine","allowUnknownOption","allowUnknown","allowExcessArguments","allowExcess","enablePositionalOptions","positional","passThroughOptions","passThrough","storeOptionsAsProperties","storeAsProperties","key","setOptionValue","source","getOptionValueSource","_prepareUserArgs","parseOptions","userArgs","versions","electron","from","defaultApp","filename","basename","extname","_parseCommand","async","_executeSubCommand","subcommand","launchWithNode","sourceExt","_checkForMissingMandatoryOptions","baseDir","scriptPath","resolvedLink","realpathSync","dirname","e","bin","localBin","proc","existsSync","ext","platform","unshift","incrementNodeInspectorPort","execArgv","spawn","stdio","execPath","signal","killed","kill","exitCallback","bind","executableMissing","wrappedError","nestedError","runningCommand","_dispatchSubcommand","commandName","operands","unknown","subCommand","help","error","_checkNumberOfArguments","i","missingArgument","_excessArguments","_processArguments","myParseArg","parsedValue","declaredArg","index","reduce","processed","v","_chainOrCall","promise","then","_chainOrCallHooks","result","hooks","getCommandAndParents","reverse","filter","hookedCommand","callback","hookDetail","parsed","_parseOptionsEnv","outputHelpIfRequested","checkForUnknownOptions","unknownOption","commandEvent","actionResult","emit","listenerCount","unknownCommand","find","is","anOption","missingMandatoryOptionValue","dest","maybeOption","activeVariadicOption","shift","optionMissingArgument","test","indexOf","len","_versionOptionName","_version","outputHelp","env","optionKey","flag","suggestion","startsWith","candidateFlags","moreFlags","visibleOptions","map","receivedArgs","expected","s","unknownName","candidateNames","visibleCommands","alias","versionOption","argsDescription","usage","_usage","helpInformation","contextOptions","helper","helpWidth","formatHelp","_getHelpContext","context","deprecatedCallback","Buffer","isBuffer","helpOption","helpFlags","shortFlag","longFlag","addHelpText","position","text","helpEvent","helpStr","debugOption","debugHost","debugPort","parseInt","startCommand","captureStackTrace","sortSubcommands","sortOptions","helpName","helpArgs","helpCommand","sort","a","b","localeCompare","showShortHelpFlag","showLongHelpFlag","getSortKey","short","visibleArguments","subcommandTerm","optionTerm","argumentTerm","longestSubcommandTermLength","max","Math","longestOptionTermLength","longestArgumentTermLength","commandUsage","cmdName","parentCmdNames","parentCmd","commandDescription","subcommandDescription","optionDescription","extraInfo","choice","JSON","stringify","argumentDescription","extraDescripton","termWidth","padWidth","formatItem","term","fullText","padEnd","wrap","formatList","textArray","repeat","output","argumentList","optionList","commandList","width","indent","minColumnWidth","columnWidth","leadingStr","substr","columnText","indentString","line","trimRight","flagParts","optionFlags","hideHelp","hide","word","toUpperCase","candidates","Set","searchingOptions","candidate","similar","bestDistance","distance","abs","d","j","cost","min","editDistance","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","c"],"sourceRoot":""}